$ start-all.sh
$ cd IST3134/
$ ls
$ mkdir ~/workspace
$ cp traffic.csv ~/workspace/
$ cd ~
$ hadoop fs -mkdir -p /home/hadoop/IST3134/dataset
$ cd workspace
$ hadoop fs -put traffic.csv /home/hadoop/IST3134/dataset
$ cd ~/workspace/wordcount/src
$ ls
$ cd ~/workspace/lof/src
$ hadoop classpath
$ touch anomalydetection.java
$ javac anomalydetect.java
$ start_time=$(date +%s)
$ hadoop jar lofanomaly.jar LOFAnomalyDetection /user/hadoop/IST3134/dataset/traffic.csv /user/hadoop/IST3134/results
$ end_time=$(date +%s)
$ execution_time=$((end_time - start_time))
$ echo "Execution time: ${execution_time} seconds"
$ jar cf lofanomaly.jar LOFAnomalyDetection$LOFMapper.class LOFAnomalyDetection$LOFReducer.class
$ hadoop fs -ls output
$ hadoop fs -cat output/part-r-00000 | less
$ hadoop fs -rm -r output



  java code
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

public class LOFAnomalyDetection {

    public static class LOFMapper extends Mapper<Object, Text, Text, Text> {

        private final Text outputKey = new Text();
        private final Text outputValue = new Text();

        public void map(Object key, Text value, Context context) throws IOException, InterruptedException {
            String line = value.toString();
            String[] columns = line.split(",");

            // Extract the relevant columns for anomaly detection
            String travelTime = columns[2];
            String speed = columns[1];
            String linkId = columns[5];

            // Perform anomaly detection logic here using travelTime, speed, and linkId

            // Set output key and value
            outputKey.set(linkId);  // Set link_id as the output key
            outputValue.set(travelTime + "," + speed);

            // Emit the key-value pair
            context.write(outputKey, outputValue);
        }
    }

    public static class LOFReducer extends Reducer<Text, Text, Text, Text> {

        public void reduce(Text key, Iterable<Text> values, Context context) throws IOException, InterruptedException {
            List<String> dataPoints = new ArrayList<>();

            // Collect the data points for the current link_id
            for (Text value : values) {
                dataPoints.add(value.toString());
            }

            // Perform LOF calculation and anomaly detection logic here

            // Output the result
            context.write(key, new Text("Anomaly Score"));
        }
    }

    public static void main(String[] args) throws Exception {
        Configuration conf = new Configuration();
        Job job = Job.getInstance(conf, "LOF Anomaly Detection");
        job.setJarByClass(LOFAnomalyDetection.class);
        job.setMapperClass(LOFMapper.class);
        job.setReducerClass(LOFReducer.class);
        job.setOutputKeyClass(Text.class);
        job.setOutputValueClass(Text.class);

        FileInputFormat.addInputPath(job, new Path(args[0]));
        FileOutputFormat.setOutputPath(job, new Path(args[1]));

        System.exit(job.waitForCompletion(true) ? 0 : 1);
    }
}
